function [out] = ImportOmegaTemperature(filename, delimiter)
%IMPORTFILE Import numeric data from a text file as column vectors.
%   [SAMPLE,DATE,TIMESTAMP,ID,TEMP1,TEMP1_TYPE,TEMP1_UNITS,TEMP2,TEMP2_TYPE,TEMP2_UNIT,VARNAME11,VARNAME12]
%   = IMPORTFILE(FILENAME) Reads data from text file FILENAME for the
%   default selection.
%
%   [SAMPLE,DATE,TIMESTAMP,ID,TEMP1,TEMP1_TYPE,TEMP1_UNITS,TEMP2,TEMP2_TYPE,TEMP2_UNIT,VARNAME11,VARNAME12]
%   = IMPORTFILE(FILENAME, STARTROW, ENDROW) Reads data from rows STARTROW
%   through ENDROW of text file FILENAME.
%
% Example:
%   [Sample,Date,timestamp,ID,temp1,temp1_type,temp1_units,temp2,temp2_type,temp2_unit,VarName11,VarName12] = importfile('20161018155943.csv',11, 4982);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2016/10/19 11:48:23

%% Initialize variables.
startRow = 11;
endRow = inf;
%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
textscan(fileID, '%[^\n\r]', startRow(1)-1, 'WhiteSpace', '', 'ReturnOnError', false);
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    textscan(fileID, '%[^\n\r]', startRow(block)-1, 'WhiteSpace', '', 'ReturnOnError', false);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'ReturnOnError', false);
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,4,5,8]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end

% Convert the contents of columns with dates to MATLAB datetimes using date
% format string.
try
    dates{3} = datetime(dataArray{3}, 'Format', 'HH:mm:ss', 'InputFormat', 'HH:mm:ss');
catch
    try
        % Handle dates surrounded by quotes
        dataArray{3} = cellfun(@(x) x(2:end-1), dataArray{3}, 'UniformOutput', false);
        dates{3} = datetime(dataArray{3}, 'Format', 'HH:mm:ss', 'InputFormat', 'HH:mm:ss');
    catch
        dates{3} = repmat(datetime([NaN NaN NaN]), size(dataArray{3}));
    end
end

anyBlankDates = cellfun(@isempty, dataArray{3});
anyInvalidDates = isnan(dates{3}.Hour) - anyBlankDates;
dates = dates(:,3);

%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [1,4,5,8]);
rawCellColumns = raw(:, [2,6,7,9,10,11,12]);


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Allocate imported array to column variable names
out.sample = cell2mat(rawNumericColumns(:, 1));
out.date = rawCellColumns(:, 1);
out.timestamp = dates{:, 1};
out.ID = cell2mat(rawNumericColumns(:, 2));
out.temp1 = cell2mat(rawNumericColumns(:, 3));
out.temp1_type = rawCellColumns(:, 2);
out.temp1_units = rawCellColumns(:, 3);
out.temp2 = cell2mat(rawNumericColumns(:, 4));
out.temp2_type = rawCellColumns(:, 4);
out.temp2_unit = rawCellColumns(:, 5);

% For code requiring serial dates (datenum) instead of datetime, uncomment
% the following line(s) below to return the imported dates as datenum(s).

% timestamp=datenum(timestamp);


